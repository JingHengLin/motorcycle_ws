// Generated by gencpp from file motorcycle_gz/parameterData.msg
// DO NOT EDIT!


#ifndef MOTORCYCLE_GZ_MESSAGE_PARAMETERDATA_H
#define MOTORCYCLE_GZ_MESSAGE_PARAMETERDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motorcycle_gz
{
template <class ContainerAllocator>
struct parameterData_
{
  typedef parameterData_<ContainerAllocator> Type;

  parameterData_()
    : force(0.0)
    , velocity(0.0)
    , direction(0.0)
    , time(0.0)  {
    }
  parameterData_(const ContainerAllocator& _alloc)
    : force(0.0)
    , velocity(0.0)
    , direction(0.0)
    , time(0.0)  {
  (void)_alloc;
    }



   typedef double _force_type;
  _force_type force;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _direction_type;
  _direction_type direction;

   typedef double _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::motorcycle_gz::parameterData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motorcycle_gz::parameterData_<ContainerAllocator> const> ConstPtr;

}; // struct parameterData_

typedef ::motorcycle_gz::parameterData_<std::allocator<void> > parameterData;

typedef boost::shared_ptr< ::motorcycle_gz::parameterData > parameterDataPtr;
typedef boost::shared_ptr< ::motorcycle_gz::parameterData const> parameterDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motorcycle_gz::parameterData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motorcycle_gz::parameterData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motorcycle_gz::parameterData_<ContainerAllocator1> & lhs, const ::motorcycle_gz::parameterData_<ContainerAllocator2> & rhs)
{
  return lhs.force == rhs.force &&
    lhs.velocity == rhs.velocity &&
    lhs.direction == rhs.direction &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motorcycle_gz::parameterData_<ContainerAllocator1> & lhs, const ::motorcycle_gz::parameterData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motorcycle_gz

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::motorcycle_gz::parameterData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motorcycle_gz::parameterData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motorcycle_gz::parameterData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motorcycle_gz::parameterData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motorcycle_gz::parameterData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motorcycle_gz::parameterData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motorcycle_gz::parameterData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea51df68025e04a7c8e74f0d28f60b43";
  }

  static const char* value(const ::motorcycle_gz::parameterData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea51df68025e04a7ULL;
  static const uint64_t static_value2 = 0xc8e74f0d28f60b43ULL;
};

template<class ContainerAllocator>
struct DataType< ::motorcycle_gz::parameterData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motorcycle_gz/parameterData";
  }

  static const char* value(const ::motorcycle_gz::parameterData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motorcycle_gz::parameterData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 force\n"
"float64 velocity\n"
"float64 direction\n"
"float64 time\n"
;
  }

  static const char* value(const ::motorcycle_gz::parameterData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motorcycle_gz::parameterData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.force);
      stream.next(m.velocity);
      stream.next(m.direction);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct parameterData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motorcycle_gz::parameterData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motorcycle_gz::parameterData_<ContainerAllocator>& v)
  {
    s << indent << "force: ";
    Printer<double>::stream(s, indent + "  ", v.force);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "direction: ";
    Printer<double>::stream(s, indent + "  ", v.direction);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTORCYCLE_GZ_MESSAGE_PARAMETERDATA_H
